<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
<!--    声明springMVC的核心对象

           访问mymvc地址后, 报错文件没有找到文件./WEB-INF/springmvc-servlet.xml
           默认情况下: 中心服务器注册的servlet名字是什么, 它的文件名就是 /WEB-INF/xxx-servlet.xml
                    比如 注册的名字为 myweb,的文件名就是 /WEB-INF/myweb-servlet.xml

            错误原因: 在servlet 的init()方法中, 创建springmvc 使用的容器对象WebApplicationContext
            WebApplicationContext wac = new ClassPathXMLApplicationContext(配置文件名称);
            配置文件的默认路径是 : /WEB-INF/<servlet-name>-servlet.xml

            DispatcherServlet的作用:
            1. 在init()中创建SpringMVC的容器对象,WebApplicationContext. 创建
            springmvc配置文件存在的对象,就是Controller对象.
            2. DispactcherServlet是一个Servlet , 能够接受请求.
-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
<!--        自定义配置文件的位置-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:springmvc.xml</param-value>
        </init-param>
<!--        这个标签表示服务器tomcat创建对象的顺序,是一个整数值, 大于等于0
        数字越小,创建对象的时间以越早.
-->
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
<!--     url-pattern 作用: 把一些请求交给指定的servlet处理
            使用中央调度器(DispatcherServlet)
            1. 使用扩展名方式, 格式: *.xxx, xxx是自定义的扩展名
                例如 : *.do , *.action, *.mvc等等,但是不能使用 *.jsp
                因为会引发歧义, 服务器就不知道该访问页面还是处理请求.
             2. 使用 "/" 
   -->
        <url-pattern>*.do</url-pattern>
    </servlet-mapping>
</web-app>