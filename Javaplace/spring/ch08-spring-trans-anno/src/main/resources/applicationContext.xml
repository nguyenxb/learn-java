<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd">
<!--    把数据库的配置信息,写在一个独立的文件,编译修改数据库的配置内容
        spring知道jdbc.properties文件的位置
-->
    <context:property-placeholder location="jdbc.properties"/>
<!--    声明数据源DataSource,作用是连接数据库的
        使用属性配置文件中的数据
-->
    <bean id="myDataSources" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="maxActive" value="${jdbc.maxActive}"/>
    </bean>

<!--    声明的是mybatis中提供的SqlSessionFactoryBean类,
            这个类内部创建SqLSessionFactoryBean-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
<!--        set注入,把数据库连接池赋值给dataSource属性-->
        <property name="dataSource" ref="myDataSources"/>
<!--            mybatis主配置文件的位置
            configLocation 是Resource类型, 读取配置文件
            它的赋值是使用value,指定文件的路径, 即 使用 classpath: 表示文件的位置
-->
        <property name="configLocation" value="mybatis.xml"/>
    </bean>

<!--    创建dao对象,使用sqlSession的getMapper(Student.class)
        MapperScannerConfigurer: 在北部调用getMapper()歙观察每个dao接口的代理对象
-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
<!--        指定SqlSessionFactory对象的id-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
<!--        指定包名,包名是dao接口所在的包名.
        mapperScannerConfigurer会扫描这个包中的所有接口,把每个接口都执行异常getMapper()方法
            得到每个接口的dao对象,创建好的dao对象放入到spring的容器中.
            dao对象的默认名称是接口名的首字母小写
-->
        <property name="basePackage" value="com.nguyenxb.dao"/>
    </bean>

<!--    声明service-->
    <bean id="buyGoodsService" class="com.nguyenxb.service.impl.BuyGoodsServiceImpl">
        <property name="saleDao" ref="saleDao"/>
        <property name="goodsDao" ref="goodsDao"/>
    </bean>

<!--    使用spring的事务处理-->
<!--    声明事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
<!--        连接的数据库, 指定的数据库源-->
        <property name="dataSource" ref="myDataSources"/>
    </bean>
    <!--        开启事务注解驱动, 告诉spring使用注解管理事务, 创建代理对象
             导入的应该是这个地址: http://www.springframework.org/schema/tx
             transaction-manager 表示的是事务管理器的id
    -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

</beans>