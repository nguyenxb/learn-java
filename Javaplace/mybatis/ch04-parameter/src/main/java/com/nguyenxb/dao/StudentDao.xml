<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.nguyenxb.dao.StudentDao">
    <!--Enter your sql statement with (select | insert | update |delete) label-->

<!--
    parameterType: 指定dao接口形参的类型,
                这个属性的值可以使用java类型的全限定名称或者 mybatis 定义的别名
    mybatis执行的sql语句: select id,name,email,age from student where id = ?

    PreparedStatement psmt =
    conn.preparedStatement("select id,name,email,age from student where id = ?");

    给 ? 位置赋值
    参数Integer,执行 psmt.setInt(1,1005);
    参数是String,执行pstm.setString(1,"1005");

    第一种用法: java类型的全限定类型名称 parameterType = "java.lang.Integer"
    第二个用法: mybatis定义的java类型的别名, parameterType = "int"

    parameterType: mybatis通过反射机制可以获取 dao接口方法的参数, 可以不写
-->
    <select id="selectByEmail" resultType="com.nguyenxb.entity.Student">
        select id,name,email,age from student where email=#{studentEmail}
    </select>

    <select id="selectById" parameterType="java.lang.Integer" resultType="com.nguyenxb.entity.Student">
        select id,name,email,age from student where id = #{studentId}
    </select>

<!--    多个简单类型的参数
        当使用了@Param 命名后, 例如 @Param(value="myname")
        在maper中, 使用#{命名的参数} 例如#{myname}
-->
    <select id="selectByNameOrAge" resultType="com.nguyenxb.entity.Student">
        select id,name,email,age from student where name=#{myname} or age =#{myage}
    </select>

<!--    一个java对象作为方法的参数,使用对象的属性作为参数值使用
       简单的语法: #{属性名}, mybatis调用此属性的getXxx方法获取属性值
-->
    <select id="selectByObject" resultType="com.nguyenxb.entity.Student">
        select id,name,email,age from student where
            name=#{name,javaType=java.lang.String,jdbcType=VARCHAR}
         or
            age = #{age,javaType=java.lang.Integer,jdbcType=INTEGER}
    </select>

    <select id="selectByObject2" resultType="com.nguyenxb.entity.Student">
        select id,name,email,age from student where name =#{p1} or age=#{p2}
    </select>
<!--    使用位置获取参数值, dao接口方法是多个简单类型的参数
        语法: #{arg0} #{arg1}....
-->
    <select id="selectByPosition" resultType="com.nguyenxb.entity.Student">
         select id,name,email,age from student where name = #{arg0} or age = #{arg1}
    </select>
<!--    使用map 传递参数
        在 mapper 文件中, 获取 map的值, 是通过key获取的,语法: #{key}
-->
    <select id="selectStudentByMap" resultType="com.nguyenxb.entity.Student">
         select id,name,email,age from student where name = #{myname} or age = #{myage}
    </select>

<!--    ${} 的使用-->
    <select id="queryStudent" resultType="com.nguyenxb.entity.Student">
        select * from student where name = ${studentName}
    </select>
 <select id="queryStudentByColName" resultType="com.nguyenxb.entity.Student">
        select * from student order by ${colName} desc
    </select>
<select id="queryStudents" resultType="com.nguyenxb.entity.Student">
        select * from ${tableName} where name = #{name} order by ${colName} desc
    </select>




    <select id="selectStudentById" resultType="student">
        select id,name,email,age from student where id = #{studentId}
    </select>
    <select id="selectStudents" resultType="com.nguyenxb.entity.Student">
        select * from student
    </select>
    <insert id="insertStudent">
        insert into student values(#{id},#{name},#{email},#{age})
    </insert>

</mapper>