<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.nguyenxb.dao.StudentDao">
<!--    查询一个学生的Student
    <select> : 表示查询操作,里面是select 语句
    id : 要执行的sql语句的唯一标识,是一个自定义字符串
        推荐使用dao接口中的方法名称
    resultType:告诉mybatis,执行sql语句,把数据赋值给哪个类型的java对象.
        resultType的值现在使用的java对象的全限定名称

    全限定名称: 就是mybatis通过反射机制创建resultType中的对象,并且将语句中的同名字段
    赋值给新创建的对象.然后mybatis再将数据返回
-->
    <select id="selectStudentById" resultType="com.nguyenxb.entity.Student">
        select id,name,email,age from student where id = #{studentId}
    </select>

<!--    添加 insert
     insert into student values(1003,"哈哈","haha@qq.ocm",20)

     如果传入给 mybatis 是一个java对象, 使用#{属性名} 获取次属性的值.
     属性值放到 #{} 占位符的位置, mybatis 执行此属性,对应的getXxx().
     例如 #{id} , 执行 getId();
-->
    <insert id="insertStudent">
        insert into student values(#{id},#{name},#{email},#{age})
    </insert>
</mapper>

<!--
    1.约束文件: 可以打开看的
    http://mybatis.org/dtd/mybatis-3-mapper.dtd
    约束文件的作用:定义和限制当前文件中可以使用的标签和属性,以及标签出现的顺序

    2.mapper是根标签
        namespace: 命名空间,必须有值,不能为空.唯一值.
                    推荐使用Dao接口的全限定名称.
        作用: 参与识别sql语句的作用.

    3.在mapper里面可以写<insert>,<update>,<delete>,<select>等标签.
    <insert>里面是 insert语句, 表示执行 insert操作
    <update>里面是 update语句,
    <delete>里面是 delete语句,
    <select>里面是 select语句,
    这些标签对于出现的顺序没有限制,并且可以出现多次
-->